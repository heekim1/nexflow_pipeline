includeConfig 'versions.config'

trace {
    enabled = true
    file = 'pipeline_trace.txt'
    fields = 'task_id,name,container,status,exit,start,realtime,%cpu,rss,hash,native_id,process,tag,module,attempt,submit,complete,duration,%mem,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes'
    raw = true
}

timeline {
    enabled = true
    file = 'pipeline_timeline.html'
}

profiles {
  standard {
    docker.enabled = true
    process.executor = 'local'
    process.clusterOptions = ''
    docker.runOptions = "-u=\$UID --rm"
  }

  cluster {
    docker.enabled = true
    process.executor = 'sge'
    process.queue = 'all.q'
    process.penv = 'smp'
    process.clusterOptions = { "-l h_vmem=${task.ext.vmem} -S /bin/bash -l docker_version=new -P onco" }
    docker.runOptions = "-u=\$UID --rm -v /sc1:/sc1"
  }

  local {
    docker.enabled = true
    process.executor = 'local'
    process.clusterOptions = ''
    docker.runOptions = "-u=\$UID --rm -v /sc1:/sc1"
  }
}

// Defalut Params
params.demuxTool = "sbx_index_tool"
params.chunkSize = 100000000
params.chromPrefix = "chr"
params.splitByChrom = false

process {
    withName:  demux{
       memory = '4 GB'
       cpus = 1 
       container = "${params.demux_sbx_index_toolsVersion}"
       ext {
            vmem = '4G'
       }
    }
}

process {
    withName:  mergeSampleFq{
       memory = '4 GB'
       cpus = 1
       container = "${params.demux_sbx_index_toolsVersion}"
       ext {
            vmem = '4G'
       }
    }
}

process {
    withName:  cpuDemux{
       memory = '32 GB'
       cpus = 8
       container = "${params.cpuDemuxVersion}"
       ext {
            vmem = '4G'
       }
    }
}

process {
    withName:  align{
       memory = '32 GB'
       cpus = 8
       container = "${params.alignVersion}"
       ext {
            vmem = '4G'
       }
    }
}

process {
    withName:  splitBam{
       memory = '8 GB'
       cpus = 2
       container = "${params.alignVersion}"
       ext {
            vmem = '8G'
       }
    }
}

process {
    withName:  umiCluster{
       memory = '32 GB'
       cpus = 8
       container = "${params.clusterer_allamericanVersion}"
       ext {
            vmem = '4G'
       }
    }
}

process {
    withName:  consensusGen{
       memory = '32 GB'
       cpus = 8
       container = "${params.consensus_cobbsaladVersion}"
       ext {
            vmem = '4G'
       }
    }
}

process {
    withName:  postAln{
       memory = '32 GB'
       cpus = 8
       container = "${params.alignVersion}"
       ext {
            vmem = '4G'
       }
    }
}

process {
    withName:  mergeBam{
       memory = '8 GB'
       cpus = 2
       container = "${params.alignVersion}"
       ext {
            vmem = '8G'
       }
    }
}
